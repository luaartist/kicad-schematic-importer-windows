class PathValidator:
    def __init__(self):
        # Existing initialization code
        pass
    
    def is_safe_path(self, path):
        """Check if a path is safe to use."""
        # Implement path safety checks
        return True
    
    def get_image_dpi(self, image_path):
        """Get the DPI of an image.
        
        Args:
            image_path (str): Path to the image file
            
        Returns:
            float: The DPI of the image, defaults to 96.0 if not available
        """
        try:
            from PIL import Image
            with Image.open(image_path) as img:
                dpi = img.info.get('dpi')
                if dpi:
                    return float(dpi[0])
            return 96.0  # Default DPI
        except Exception:
            return None
    
    def validate_image_dpi(self, image_path, min_dpi=300):
        """Validate that an image has sufficient DPI.
        
        Args:
            image_path (str): Path to the image file
            min_dpi (float): Minimum required DPI (default: 300)
            
        Returns:
            float: The image DPI if valid
            
        Raises:
            ValueError: If the image DPI is below the minimum required
        """
        dpi = self.get_image_dpi(image_path)
        if dpi < min_dpi:
            raise ValueError(f"Image resolution too low: {dpi} DPI. Minimum required: {min_dpi} DPI")
        return dpi