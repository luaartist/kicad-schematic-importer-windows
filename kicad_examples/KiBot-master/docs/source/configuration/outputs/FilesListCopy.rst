.. _FilesListCopy:


FilesListCopy parameters
~~~~~~~~~~~~~~~~~~~~~~~~

-  **source** :index:`: <pair: output - copy_files - options - files; source>` [:ref:`string <string>`] (default: ``'*'``) For the `files` and `out_files` mode this is th file names to add,
   wildcards allowed. Use ** for recursive match.
   For the `output` mode this is the name of the output.
   For the `3d_models` is a pattern to match the name of the 3D models extracted from the PCB.
   Not used for the `project` mode.
-  **source_type** :index:`: <pair: output - copy_files - options - files; source_type>` [:ref:`string <string>`] (default: ``'files'``) (choices: "files", "out_files", "output", "3d_models", "project") From where do we get the files to be copied.

   - `files`: files relative to the current working directory.
   - `out_files`: files relative to output dir specified with `-d` command line option.
   - `output`: files generated by the output specified by `source`.
   - `3d_models`: 3D models used in the project.
   - `project`: schematic, PCB, footprints, symbols, 3D models and project files (KiCad 6+).
-  ``dest`` :index:`: <pair: output - copy_files - options - files; dest>` [:ref:`string <string>`] (default: ``''``) Destination directory inside the output dir, empty means the same of the file
   relative to the source directory.
   Note that when you specify a name here files are copied to this destination
   without creating subdirs. The `project` mode is an exception.
   For the `3d_models` type you can use DIR+ to create subdirs under DIR.
-  ``filter`` :index:`: <pair: output - copy_files - options - files; filter>` [:ref:`string <string>`] (default: ``'.*'``) A regular expression that source files must match.
   Not used for the `project` mode.
-  ``save_pcb`` :index:`: <pair: output - copy_files - options - files; save_pcb>` [:ref:`boolean <boolean>`] (default: ``false``) Only usable for the `3d_models` mode.
   Save a PCB copy modified to use the copied 3D models.
   You don't need to specify it for `project` mode.

