.. Automatically generated by KiBot, please don't edit this file

.. index::
   pair: Generic filter; generic

Generic filter
~~~~~~~~~~~~~~

   This filter is based on regular expressions. |br|
   It also provides some shortcuts for common situations. |br|
   Note that matches aren't case sensitive and spaces at the beginning and the end are removed. |br|
   The internal `_mechanical` filter emulates the KiBoM behavior for default exclusions. |br|
   The internal `_kicost_dnp` filter emulates KiCost's `dnp` field. |br|

   -  **comment** :index:`: <pair: filter - generic; comment>` [:ref:`string <string>`] (default: ``''``) A comment for documentation purposes.
   -  **name** :index:`: <pair: filter - generic; name>` [:ref:`string <string>`] (default: ``''``) Used to identify this particular filter definition.
   -  ``config_field`` :index:`: <pair: filter - generic; config_field>` [:ref:`string <string>`] (default: ``'Config'``) Name of the field used to classify components.
   -  ``config_separators`` :index:`: <pair: filter - generic; config_separators>` [:ref:`string <string>`] (default: ``' ,'``) Characters used to separate options inside the config field.
   -  ``exclude_all_hash_ref`` :index:`: <pair: filter - generic; exclude_all_hash_ref>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude all components with a reference starting with #.
   -  ``exclude_any`` :index:`: <pair: filter - generic; exclude_any>`  [:ref:`BoMRegex parameters <BoMRegex_fi>`] [:ref:`list(dict) <list(dict)>`] (default: ``[]``) A series of regular expressions used to exclude parts.
      If a component matches ANY of these, it will be excluded.
      Column names are case-insensitive.
   -  ``exclude_bottom`` :index:`: <pair: filter - generic; exclude_bottom>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components on the bottom side of the PCB.
   -  ``exclude_config`` :index:`: <pair: filter - generic; exclude_config>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components containing a key value in the config field.
      Separators are applied.
   -  ``exclude_empty_val`` :index:`: <pair: filter - generic; exclude_empty_val>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components with empty 'Value'.
   -  ``exclude_field`` :index:`: <pair: filter - generic; exclude_field>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components if a field is named as any of the keys.
   -  ``exclude_not_in_bom`` :index:`: <pair: filter - generic; exclude_not_in_bom>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components marked *Exclude from bill of materials* (KiCad 6+).
   -  ``exclude_not_on_board`` :index:`: <pair: filter - generic; exclude_not_on_board>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components marked *Exclude from board* (KiCad 6+).
   -  ``exclude_refs`` :index:`: <pair: filter - generic; exclude_refs>` [:ref:`list(string) <list(string)>`] (default: ``[]``) List of references to be excluded.
      Use R* for all references with R prefix.

   -  ``exclude_smd`` :index:`: <pair: filter - generic; exclude_smd>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components marked as smd in the PCB.
   -  ``exclude_tht`` :index:`: <pair: filter - generic; exclude_tht>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components marked as through-hole in the PCB.
   -  ``exclude_top`` :index:`: <pair: filter - generic; exclude_top>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components on the top side of the PCB.
   -  ``exclude_value`` :index:`: <pair: filter - generic; exclude_value>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components if their 'Value' is any of the keys.
   -  ``exclude_virtual`` :index:`: <pair: filter - generic; exclude_virtual>` [:ref:`boolean <boolean>`] (default: ``false``) Exclude components marked as virtual in the PCB.
   -  ``include_only`` :index:`: <pair: filter - generic; include_only>`  [:ref:`BoMRegex parameters <BoMRegex_fi>`] [:ref:`list(dict) <list(dict)>`] (default: ``[]``) A series of regular expressions used to include parts.
      If there are any regex defined here, only components that match against ANY of them will be included.
      Column/field names are case-insensitive.
      If empty this rule is ignored.
   -  ``invert`` :index:`: <pair: filter - generic; invert>` [:ref:`boolean <boolean>`] (default: ``false``) Invert the result of the filter.
   -  ``keys`` :index:`: <pair: filter - generic; keys>` [:ref:`string <string>` | :ref:`list(string) <list(string)>`] (default: ``'dnf_list'``) (choices: "dnc_list", "dnf_list") (also accepts any string) List of keys to match.
      The `dnf_list` and `dnc_list` internal lists can be specified as strings.
      Use `dnf_list` for ['dnf', 'dnl', 'dnp', 'do not fit', 'do not load', 'do not place', 'no stuff', 'nofit', 'noload', 'noplace', 'nostuff', 'not fitted', 'not loaded', 'not placed'].
      Use `dnc_list` for ['dnc', 'do not change', 'fixed', 'no change'].


.. toctree::
   :caption: Used dicts

   BoMRegex
