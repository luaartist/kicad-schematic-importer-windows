.. Automatically generated by KiBot, please don't edit this file

.. index::
   pair: Value Splitter; value_split

Value Splitter
~~~~~~~~~~~~~~

   This filter extracts information from the value and fills other fields. |br|
   I.e. extracts the tolerance and puts it in the `tolerance` field. |br|
   Usage `example <https://inti-cmnb.github.io/kibot-examples-1/value_split/>`__. |br|

   -  **comment** :index:`: <pair: filter - value_split; comment>` [:ref:`string <string>`] (default: ``''``) A comment for documentation purposes.
   -  **name** :index:`: <pair: filter - value_split; name>` [:ref:`string <string>`] (default: ``''``) Used to identify this particular filter definition.
   -  ``autoplace`` :index:`: <pair: filter - value_split; autoplace>` [:ref:`boolean <boolean>`] (default: ``true``) Try to figure out the position for the added fields.
   -  ``autoplace_mechanism`` :index:`: <pair: filter - value_split; autoplace_mechanism>` [:ref:`string <string>`] (default: ``'bottom'``) (choices: "bottom", "top") Put the new field at the bottom/top of the last field.
   -  ``package`` :index:`: <pair: filter - value_split; package>` [:ref:`string <string>`] (default: ``'yes'``) (choices: "yes", "no", "soft") Policy for the package.
      yes = overwrite existing value, no = don't touch, soft = copy if not defined.
   -  ``power`` :index:`: <pair: filter - value_split; power>` [:ref:`string <string>`] (default: ``'yes'``) (choices: "yes", "no", "soft") Policy for the power rating.
      yes = overwrite existing value, no = don't touch, soft = copy if not defined.
   -  ``replace_source`` :index:`: <pair: filter - value_split; replace_source>` [:ref:`boolean <boolean>`] (default: ``true``) Replace the content of the source field using a normalized representation of the interpreted value.
   -  ``source`` :index:`: <pair: filter - value_split; source>` [:ref:`string <string>`] (default: ``'Value'``) Name of the field to use as source of information.
   -  ``temp_coef`` :index:`: <pair: filter - value_split; temp_coef>` [:ref:`string <string>`] (default: ``'yes'``) (choices: "yes", "no", "soft") Policy for the temperature coefficient.
      yes = overwrite existing value, no = don't touch, soft = copy if not defined.
   -  ``tolerance`` :index:`: <pair: filter - value_split; tolerance>` [:ref:`string <string>`] (default: ``'yes'``) (choices: "yes", "no", "soft") Policy for the tolerance.
      yes = overwrite existing value, no = don't touch, soft = copy if not defined.
   -  ``visible`` :index:`: <pair: filter - value_split; visible>` [:ref:`boolean <boolean>`] (default: ``false``) Make visible the modified fields.
   -  ``voltage`` :index:`: <pair: filter - value_split; voltage>` [:ref:`string <string>`] (default: ``'yes'``) (choices: "yes", "no", "soft") Policy for the voltage rating.
      yes = overwrite existing value, no = don't touch, soft = copy if not defined.

