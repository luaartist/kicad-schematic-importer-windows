.. Automatically generated by KiBot, please don't edit this file

.. index::
   pair: Footprint Rotator; rot_footprint

Footprint Rotator
~~~~~~~~~~~~~~~~~

   This filter can rotate footprints, used for the positions file generation. |br|
   Some manufacturers use a different rotation than KiCad. |br|
   The `JLCPCB Rotation Offset` and `JLCPCB Position Offset` fields can be used to adjust special cases. |br|
   The internal `_rot_footprint` filter implements the simplest case. |br|

   -  **comment** :index:`: <pair: filter - rot_footprint; comment>` [:ref:`string <string>`] (default: ``''``) A comment for documentation purposes.
   -  **name** :index:`: <pair: filter - rot_footprint; name>` [:ref:`string <string>`] (default: ``''``) Used to identify this particular filter definition.
   -  ``bennymeg_mode`` :index:`: <pair: filter - rot_footprint; bennymeg_mode>` [:ref:`boolean <boolean>`] (default: ``true``) Implements the `rot_fields` and `offset_fields` in the same way that the bennymeg/JLC-Plugin-for-KiCad tool.
      Note that the computation for bottom rotations is wrong, forcing the user to uses arbitrary rotations.
      The correct computation is `(180 - component rot) + angle` but the plugin does `180 - (component rot + angle)`.
      This option forces the wrong computation for compatibility.
      This option also controls the way offset signs are interpreted. When enabled the offsets matches this plugin,
      when disabled matches the interpretation used by the matthewlai/JLCKicadTools plugin.
      Disabling this option you'll get better algorithms, but loose compatibility with this plugin.
   -  ``extend`` :index:`: <pair: filter - rot_footprint; extend>` [:ref:`boolean <boolean>`] (default: ``true``) Extends the internal list of rotations with the one provided.
      Otherwise just use the provided list.
      Note that the provided list has more precedence than the internal list.
   -  ``invert_bottom`` :index:`: <pair: filter - rot_footprint; invert_bottom>` [:ref:`boolean <boolean>`] (default: ``false``) Rotation for bottom components is negated, resulting in either: `(- component rot - angle)`
      or when combined with `negative_bottom`, `(angle - component rot)`.
   -  ``mirror_bottom`` :index:`: <pair: filter - rot_footprint; mirror_bottom>` [:ref:`boolean <boolean>`] (default: ``false``) The original component rotation for components in the bottom is mirrored before applying
      the adjust so you get `(180 - component rot + angle)`. This is used by JLCPCB.
   -  ``negative_bottom`` :index:`: <pair: filter - rot_footprint; negative_bottom>` [:ref:`boolean <boolean>`] (default: ``true``) Rotation for bottom components is computed via subtraction as `(component rot - angle)`.
   -  ``offset_fields`` :index:`: <pair: filter - rot_footprint; offset_fields>` [:ref:`string <string>` | :ref:`list(string) <list(string)>`] (default: ``['JLCPCB Position Offset', 'JLCPosOffset']``) [:ref:`comma separated <comma_sep>`] List of fields that can contain a position offset.
      The optional fields can contain a comma separated x,y position offset.
      This concept is from the bennymeg/JLC-Plugin-for-KiCad tool.

   -  ``offsets`` :index:`: <pair: filter - rot_footprint; offsets>` [:ref:`list(list(string)) <list(list(string))>`] (default: ``[]``) A list of pairs regular expression/offset.
      Footprints matching the regular expression will be moved the specified offset.
      The offset must be two numbers separated by a comma. The first is the X offset.
      The signs matches the matthewlai/JLCKicadTools plugin specs.

   -  ``rot_fields`` :index:`: <pair: filter - rot_footprint; rot_fields>` [:ref:`string <string>` | :ref:`list(string) <list(string)>`] (default: ``['JLCPCB Rotation Offset', 'JLCRotOffset']``) [:ref:`comma separated <comma_sep>`] List of fields that can contain a rotation offset.
      The optional fields can contain a counter-clockwise orientation offset in degrees.
      This concept is from the bennymeg/JLC-Plugin-for-KiCad tool.

   -  ``rotations`` :index:`: <pair: filter - rot_footprint; rotations>` [:ref:`list(list(string)) <list(list(string))>`] (default: ``[]``) A list of pairs regular expression/rotation.
      Footprints matching the regular expression will be rotated the indicated angle.
      The angle matches the matthewlai/JLCKicadTools plugin specs.

   -  ``rotations_and_offsets`` :index:`: <pair: filter - rot_footprint; rotations_and_offsets>`  [:ref:`Regex parameters <Regex_fi>`] [:ref:`list(dict) <list(dict)>`] (default: ``[]``) A list of rules to match components and specify the rotation and offsets.
      This is a more flexible version of the `rotations` and `offsets` options.
      Note that this list has more precedence.
   -  ``skip_bottom`` :index:`: <pair: filter - rot_footprint; skip_bottom>` [:ref:`boolean <boolean>`] (default: ``false``) Do not rotate components on the bottom.
   -  ``skip_top`` :index:`: <pair: filter - rot_footprint; skip_top>` [:ref:`boolean <boolean>`] (default: ``false``) Do not rotate components on the top.

.. toctree::
   :caption: Used dicts

   Regex
